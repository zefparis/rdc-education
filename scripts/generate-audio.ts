/**
 * Script de pr√©-g√©n√©ration des fichiers audio pour tous les modules
 * Utilise OpenAI TTS pour cr√©er les voix-off en fran√ßais
 */

import dotenv from 'dotenv';
import OpenAI from 'openai';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement depuis .env.local
dotenv.config({ path: '.env.local' });

// Configuration
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface ModuleAudio {
  id: string;
  slug: string;
  textFile: string;
  outputFile: string;
}

const modules: ModuleAudio[] = [
  {
    id: 'data-science',
    slug: 'data-science',
    textFile: 'public/modules/data-science/audio-introduction.txt',
    outputFile: 'public/audio/module_data-science.mp3',
  },
  {
    id: 'deep-learning',
    slug: 'deep-learning',
    textFile: 'public/modules/deep-learning/audio-introduction.txt',
    outputFile: 'public/audio/module_deep-learning.mp3',
  },
  {
    id: 'ia-generative',
    slug: 'ia-generative',
    textFile: 'public/modules/ia-generative/audio-introduction.txt',
    outputFile: 'public/audio/module_ia-generative.mp3',
  },
  {
    id: 'mlops',
    slug: 'mlops',
    textFile: 'public/modules/mlops/audio-introduction.txt',
    outputFile: 'public/audio/module_mlops.mp3',
  },
  {
    id: 'nlp',
    slug: 'nlp',
    textFile: 'public/modules/nlp/audio-introduction.txt',
    outputFile: 'public/audio/module_nlp.mp3',
  },
  {
    id: 'ml-fondamental',
    slug: 'ml-fondamental',
    textFile: 'public/modules/ml-fondamental/audio-introduction.txt',
    outputFile: 'public/audio/module_ml-fondamental.mp3',
  },
];

async function generateAudio(module: ModuleAudio): Promise<void> {
  const textPath = path.join(process.cwd(), module.textFile);
  const outputPath = path.join(process.cwd(), module.outputFile);

  // V√©rifier si le fichier existe d√©j√†
  if (fs.existsSync(outputPath)) {
    console.log(`‚úÖ ${module.id}: Audio d√©j√† existant (${module.outputFile})`);
    return;
  }

  // Lire le texte
  if (!fs.existsSync(textPath)) {
    console.error(`‚ùå ${module.id}: Fichier texte introuvable (${module.textFile})`);
    return;
  }

  const text = fs.readFileSync(textPath, 'utf-8').trim();
  
  if (!text) {
    console.error(`‚ùå ${module.id}: Fichier texte vide`);
    return;
  }

  console.log(`üéôÔ∏è  ${module.id}: G√©n√©ration de l'audio...`);

  try {
    // G√©n√©rer l'audio avec OpenAI TTS
    const mp3 = await openai.audio.speech.create({
      model: 'tts-1', // Mod√®le rapide
      voice: 'alloy', // Meilleure prononciation fran√ßaise
      input: `Bienvenue au module ${module.id}. ${text}`,
      speed: 1.0, // Vitesse naturelle
    });

    // Convertir en buffer
    const buffer = Buffer.from(await mp3.arrayBuffer());

    // Cr√©er le dossier de sortie si n√©cessaire
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Sauvegarder le fichier
    fs.writeFileSync(outputPath, buffer);

    console.log(`‚úÖ ${module.id}: Audio g√©n√©r√© avec succ√®s (${(buffer.length / 1024).toFixed(2)} KB)`);
  } catch (error) {
    console.error(`‚ùå ${module.id}: Erreur lors de la g√©n√©ration:`, error);
  }
}

async function generateIntroAudio(): Promise<void> {
  const outputPath = path.join(process.cwd(), 'public/audio/intro.mp3');

  if (fs.existsSync(outputPath)) {
    console.log(`‚úÖ intro: Audio d√©j√† existant`);
    return;
  }

  const INTRO_TEXT = `Bienvenue sur Ia-Solution RDC, la premi√®re plateforme en R√©publique D√©mocratique du Congo d√©di√©e √† l'apprentissage de l'intelligence artificielle.
Notre mission est simple : rendre l'IA accessible √† tous les √©tudiants, enseignants et professionnels congolais. L'intelligence artificielle n'est pas seulement une technologie du futur, c'est d√©j√† une r√©alit√© qui transforme l'agriculture, la sant√©, la finance et l'√©ducation dans le monde entier.
Ici, vous trouverez des modules de formation clairs et adapt√©s √† votre rythme. Vous n'avez pas besoin d'√™tre un expert en informatique pour commencer. Pas √† pas, vous d√©couvrirez les bases de la science des donn√©es, du machine learning, du deep learning et des applications concr√®tes de l'IA dans notre pays.
Que vous soyez √©tudiant, entrepreneur ou simplement curieux, Ia-Solution RDC est votre point d'entr√©e vers le monde passionnant de l'intelligence artificielle. Ensemble, nous pouvons former une nouvelle g√©n√©ration de talents capables de b√¢tir l'avenir num√©rique de la RDC.
Explorez, apprenez, et faites partie du changement avec Ia-Solution RDC.`;

  console.log(`üéôÔ∏è  intro: G√©n√©ration de l'audio d'introduction...`);

  try {
    const mp3 = await openai.audio.speech.create({
      model: 'tts-1',
      voice: 'alloy',
      input: INTRO_TEXT,
      speed: 1.0,
    });

    const buffer = Buffer.from(await mp3.arrayBuffer());
    fs.writeFileSync(outputPath, buffer);

    console.log(`‚úÖ intro: Audio g√©n√©r√© avec succ√®s (${(buffer.length / 1024).toFixed(2)} KB)`);
  } catch (error) {
    console.error(`‚ùå intro: Erreur lors de la g√©n√©ration:`, error);
  }
}

async function main() {
  console.log('üöÄ G√©n√©ration des fichiers audio pour Ia-Solution RDC\n');

  // V√©rifier la cl√© API
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå ERREUR: Variable d\'environnement OPENAI_API_KEY non d√©finie');
    console.log('üí° Ajoutez votre cl√© OpenAI dans le fichier .env.local');
    process.exit(1);
  }

  // G√©n√©rer l'audio d'introduction
  await generateIntroAudio();
  console.log('');

  // G√©n√©rer les audios des modules
  for (const module of modules) {
    await generateAudio(module);
  }

  console.log('\n‚ú® G√©n√©ration termin√©e !');
  console.log('üìÅ Les fichiers MP3 sont disponibles dans public/audio/');
}

main().catch(console.error);
