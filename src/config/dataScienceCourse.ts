import { Module } from './enhancedCourseConfig';

export const dataScienceModule: Module = {
  id: '1',
  slug: 'data-science',
  title: 'Data Science Fondamentale',
  description: 'Ma√Ætrisez les fondamentaux de la Data Science : Python, Pandas, visualisation et statistiques pour analyser vos donn√©es efficacement.',
  duration: '8 semaines',
  level: 'D√©butant',
  icon: 'üìä',
  color: 'from-blue-500 to-cyan-500',
  image: '/images/data-science.jpg',
  pdf: '/modules/data-science/README.md',
  notebook: '/modules/data-science/module_data-science.ipynb',
  audio: '/audio/module_data-science.mp3',
  colabUrl: 'https://colab.research.google.com/github/ia-solution-rdc/data-science/blob/main/module_data-science.ipynb',
  objectives: [
    'Ma√Ætriser les bases de Python pour la Data Science',
    'Manipuler et nettoyer des donn√©es avec Pandas',
    'Cr√©er des visualisations percutantes avec Matplotlib et Seaborn',
    'Comprendre et appliquer les statistiques descriptives',
    'R√©aliser une analyse exploratoire de donn√©es compl√®te'
  ],
  prerequisites: [
    'Connaissances de base en math√©matiques (alg√®bre, statistiques)',
    'Logique de programmation souhait√©e mais non obligatoire',
    'Curiosit√© pour les donn√©es et leur analyse'
  ],
  sections: [
    {
      id: 'python-basics',
      title: 'Introduction √† Python pour la Data Science',
      content: `
        <div class="course-section">
          <h2>Pourquoi Python pour la Data Science ?</h2>
          <p>Python est le langage de r√©f√©rence en Data Science gr√¢ce √† :</p>
          <ul>
            <li><strong>Simplicit√© :</strong> Syntaxe claire et lisible</li>
            <li><strong>Polyvalence :</strong> De l'analyse √† la production</li>
            <li><strong>√âcosyst√®me :</strong> Biblioth√®ques sp√©cialis√©es</li>
            <li><strong>Communaut√© :</strong> Support et ressources abondantes</li>
          </ul>

          <h3>1. Installation et configuration</h3>
          <p>Nous recommandons Anaconda qui inclut :</p>
          <ul>
            <li>Python 3.8+</li>
            <li>Jupyter Notebook/Lab</li>
            <li>Biblioth√®ques essentielles pr√©install√©es</li>
          </ul>
          
          <h3>2. Les bases de Python pour la Data Science</h3>
          <p>Les concepts cl√©s √† ma√Ætriser :</p>
          <ul>
            <li>Structures de donn√©es (listes, dictionnaires, tuples, sets)</li>
            <li>Boucles et compr√©hensions</li>
            <li>Fonctions et programmation orient√©e objet</li>
            <li>Gestion des erreurs</li>
          </ul>
          
          <h3>3. Environnements de d√©veloppement</h3>
          <p>Outils recommand√©s :</p>
          <ul>
            <li>Jupyter Notebook pour l'exploration</li>
            <li>VS Code avec l'extension Python</li>
            <li>Google Colab pour le calcul dans le cloud</li>
          </ul>

          <h3>Premiers pas avec Python</h3>
          <p>Python est un langage interpr√©t√© qui s'ex√©cute ligne par ligne. Contrairement aux langages compil√©s comme C++, il n'y a pas besoin de compiler le code avant de l'ex√©cuter.</p>
        </div>
      `,
      order: 1,
      estimatedTime: '2h',
      codeExamples: [
        {
          title: 'Hello World - Votre premier programme',
          description: 'Le traditionnel premier programme pour d√©couvrir Python',
          code: `# Ceci est un commentaire
print("Bonjour le monde de la Data Science !")
print("Bienvenue √† Ia-Solution RDC")

# Variables en Python
nom = "Data Scientist"
age = 25
salaire_moyen = 45000.50

print(f"Bonjour {nom}, vous avez {age} ans !")`,
          language: 'python',
          explanation: 'Ce code montre les bases : commentaires, fonction print(), variables et f-strings pour le formatage.'
        },
        {
          title: 'Structures de donn√©es de base',
          description: 'Listes, tuples et dictionnaires en Python',
          code: `# Listes (mutables)
etudiants = ["Alice", "Bob", "Charlie", "Diana"]
notes = [15, 18, 12, 16]

# Ajouter un √©l√©ment
etudiants.append("Eve")
notes.append(14)

# Tuples (immutables)
coordonnees = (48.8566, 2.3522)  # Paris

# Dictionnaires (cl√©-valeur)
profil = {
    "nom": "Alice",
    "age": 25,
    "competences": ["Python", "SQL", "Tableau"],
    "experience": 3
}

print(f"Profil: {profil['nom']} - {profil['age']} ans")`,
          language: 'python',
          explanation: 'Les structures de donn√©es sont essentielles en Data Science pour organiser l\'information.'
        }
      ],
      exercises: [
        {
          id: 'ex-python-1',
          title: 'Analyse de donn√©es de ventes',
          description: 'Cr√©ez une fonction qui analyse un ensemble de donn√©es de ventes et retourne des statistiques par cat√©gorie de produits.',
          difficulty: 'moyen',
          solution: `def analyser_ventes(ventes):
    """Analyse des ventes par cat√©gorie.
    
    Args:
        ventes: Liste de dictionnaires contenant les donn√©es de vente
        
    Returns:
        Dictionnaire avec les statistiques par cat√©gorie
    """
    stats = {}
    
    for vente in ventes:
        categorie = vente["categorie"]
        montant = vente["montant"]
        
        if categorie not in stats:
            stats[categorie] = {
                "total": 0,
                "nombre_ventes": 0,
                "montant_max": float("-inf"),
                "montant_min": float("inf")
            }
            
        stats[categorie]["total"] += montant
        stats[categorie]["nombre_ventes"] += 1
        stats[categorie]["montant_max"] = max(stats[categorie]["montant_max"], montant)
        stats[categorie]["montant_min"] = min(stats[categorie]["montant_min"], montant)
    
    # Calcul des moyennes
    for categorie in stats:
        stats[categorie]["moyenne"] = stats[categorie]["total"] / stats[categorie]["nombre_ventes"]
    
    return stats

# Exemple d'utilisation
ventes = [
    {"id": 1, "categorie": "√âlectronique", "montant": 1200},
    {"id": 2, "categorie": "V√™tements", "montant": 80},
    {"id": 3, "categorie": "√âlectronique", "montant": 899},
    {"id": 4, "categorie": "Livres", "montant": 25},
    {"id": 5, "categorie": "V√™tements", "montant": 45}
]

resultats = analyser_ventes(ventes)
for categorie, stat in resultats.items():
    print(f"\n{categorie}:")
    print(f"  Total des ventes: {stat['total']}‚Ç¨")
    print(f"  Nombre de ventes: {stat['nombre_ventes']}")
    print(f"  Moyenne par vente: {stat['moyenne']:.2f}‚Ç¨")
    print(f"  Plus grosse vente: {stat['montant_max']}‚Ç¨")
    print(f"  Plus petite vente: {stat['montant_min']}‚Ç¨")`,
          hints: [
            'Commencez par initialiser un dictionnaire pour stocker les statistiques',
            'Parcourez chaque vente et mettez √† jour les compteurs',
            'Pensez √† g√©rer le cas o√π une cat√©gorie appara√Æt pour la premi√®re fois',
            'Calculez les statistiques (total, moyenne, min, max) pour chaque cat√©gorie'
          ]
        },
        {
          id: 'ex-python-2',
          title: 'Visualisation de donn√©es',
          description: 'Cr√©ez une visualisation des temp√©ratures moyennes mensuelles pour diff√©rentes villes.',
          difficulty: 'difficile',
          solution: `import matplotlib.pyplot as plt
import numpy as np

# Donn√©es m√©t√©orologiques (temp√©ratures mensuelles moyennes en ¬∞C)
donnees = {
    "Paris": [5, 6, 10, 13, 17, 20, 22, 22, 19, 14, 9, 6],
    "Lyon": [3, 5, 9, 12, 17, 21, 24, 23, 19, 14, 8, 4],
    "Marseille": [7, 8, 11, 14, 18, 22, 25, 25, 22, 17, 12, 8],
    "Lille": [4, 4, 7, 10, 14, 17, 19, 19, 16, 12, 8, 5]
}

mois = ["Jan", "F√©v", "Mar", "Avr", "Mai", "Jun", 
        "Jui", "Ao√ª", "Sep", "Oct", "Nov", "D√©c"]

# Cr√©ation de la figure
plt.figure(figsize=(12, 6))

# Trac√© des courbes pour chaque ville
for ville, temperatures in donnees.items():
    plt.plot(mois, temperatures, marker="o", label=ville, linewidth=2)

# Personnalisation du graphique
plt.title("Temp√©ratures mensuelles moyennes en France", fontsize=14, fontweight="bold")
plt.xlabel("Mois", fontsize=12)
plt.ylabel("Temp√©rature (¬∞C)", fontsize=12)
plt.legend(title="Villes", title_fontsize=12)
plt.grid(True, linestyle="--", alpha=0.7)
plt.xticks(rotation=45)
plt.tight_layout()

# Ajout d'une note explicative
plt.figtext(0.5, -0.15, 
           "Source: Donn√©es m√©t√©orologiques moyennes (1991-2020)",
           ha="center", fontsize=10, style="italic")

# Affichage du graphique
plt.show()

# Analyse des donn√©es
print("\nAnalyse des temp√©ratures annuelles moyennes :")
for ville, temperatures in donnees.items():
    moyenne_annuelle = sum(temperatures) / len(temperatures)
    print(f"- {ville}: {moyenne_annuelle:.1f}¬∞C")

# Trouver le mois le plus chaud pour chaque ville
print("\nMois les plus chauds :")
for ville, temperatures in donnees.items():
    mois_chaud = mois[temperatures.index(max(temperatures))]
    print(f"- {ville}: {mois_chaud} ({max(temperatures)}¬∞C)")`,
          hints: [
            'Utilisez matplotlib pour cr√©er le graphique',
            'Cr√©ez une ligne pour chaque ville',
            'Ajoutez des √©tiquettes et une l√©gende',
            'Personnalisez l\'apparence avec des couleurs et des styles',
            'Pensez √† ajouter un titre et des labels aux axes',
            'Utilisez la fonction show() pour afficher le graphique'
          ]
        },
        {
          id: 'ex-python-3',
          title: 'Nettoyage de donn√©es',
          description: 'Cr√©ez une fonction qui nettoie un ensemble de donn√©es en g√©rant les valeurs manquantes et les valeurs aberrantes.',
          difficulty: 'moyen',
          solution: `import pandas as pd
import numpy as np

def nettoyer_donnees(df):
    """
    Nettoie un DataFrame en g√©rant les valeurs manquantes et aberrantes.
    
    Args:
        df: DataFrame pandas √† nettoyer
        
    Returns:
        DataFrame nettoy√©
    """
    # Faire une copie pour √©viter les modifications inattendues
    df_clean = df.copy()
    
    # 1. Gestion des valeurs manquantes
    # Pour les colonnes num√©riques : remplacer par la m√©diane
    for colonne in df_clean.select_dtypes(include=[np.number]).columns:
        mediane = df_clean[colonne].median()
        df_clean[colonne].fillna(mediane, inplace=True)
    
    # Pour les colonnes cat√©gorielles : remplacer par le mode
    for colonne in df_clean.select_dtypes(include=['object']).columns:
        mode = df_clean[colonne].mode()[0]
        df_clean[colonne].fillna(mode, inplace=True)
    
    # 2. D√©tection et traitement des valeurs aberrantes (pour les colonnes num√©riques)
    for colonne in df_clean.select_dtypes(include=[np.number]).columns:
        # Calcul des bornes avec la r√®gle IQR
        Q1 = df_clean[colonne].quantile(0.25)
        Q3 = df_clean[colonne].quantile(0.75)
        IQR = Q3 - Q1
        borne_inf = Q1 - 1.5 * IQR
        borne_sup = Q3 + 1.5 * IQR
        
        # Remplacer les valeurs aberrantes par la m√©diane
        masque = (df_clean[colonne] < borne_inf) | (df_clean[colonne] > borne_sup)
        if masque.any():
            df_clean.loc[masque, colonne] = df_clean[colonne].median()
    
    # 3. Nettoyage des cha√Ænes de caract√®res
    for colonne in df_clean.select_dtypes(include=['object']).columns:
        # Supprimer les espaces en d√©but et fin
        df_clean[colonne] = df_clean[colonne].str.strip()
        # Mettre en minuscules
        df_clean[colonne] = df_clean[colonne].str.lower()
    
    return df_clean

# Exemple d'utilisation
if __name__ == "__main__":
    # Cr√©ation d'un exemple de DataFrame avec des donn√©es sales
    data = {
        "age": [25, 30, None, 35, 200, 28, 32, None],
        "salaire": [50000, 60000, 70000, None, 80000, 1200000, 65000, 55000],
        "ville": ["Paris", "Lyon", "  Marseille", "Paris", "Lille", "Paris", None, "Lyon"],
        "experience": [2, 5, 3, 7, 1, 4, None, 6]
    }
    
    df = pd.DataFrame(data)
    print("=== Avant le nettoyage ===")
    print(df)
    
    df_propre = nettoyer_donnees(df)
    print("\n=== Apr√®s le nettoyage ===")
    print(df_propre)`,
          hints: [
            'Commencez par g√©rer les valeurs manquantes',
            'Utilisez des m√©thodes statistiques pour d√©tecter les valeurs aberrantes',
            'Nettoyez les cha√Ænes de caract√®res (espaces, majuscules, etc.)',
            'Documentez bien votre fonction avec des docstrings',
            'Testez votre fonction avec diff√©rents jeux de donn√©es',
            'Pensez √† faire une copie du DataFrame pour √©viter les effets de bord'
          ]
        }
      ],
      resources: [
        {
          title: 'Documentation officielle Python',
          type: 'documentation',
          url: 'https://docs.python.org/3/'
        },
        {
          title: 'Tutoriel Python pour d√©butants',
          type: 'video',
          url: 'https://www.youtube.com/watch?v=rfscVS0vtbw'
        }
      ]
    },
    {
      id: 'pandas-fundamentals',
      title: 'Pandas : Manipulation de donn√©es',
      content: `
        <div class="course-section">
          <h3>Introduction √† Pandas</h3>
          <p>Pandas est LA biblioth√®que pour la manipulation de donn√©es en Python. Elle introduit deux structures principales :</p>

          <h4>Series : Donn√©es 1D</h4>
          <p>Une Series est comme une colonne dans un tableau Excel. Elle peut contenir diff√©rents types de donn√©es.</p>

          <h4>DataFrame : Donn√©es 2D</h4>
          <p>Un DataFrame est comme un tableau Excel complet avec des lignes et des colonnes √©tiquet√©es.</p>

          <h3>Op√©rations essentielles</h3>
          <ul>
            <li><strong>Lecture :</strong> Charger des donn√©es depuis CSV, Excel, SQL...</li>
            <li><strong>Nettoyage :</strong> G√©rer les valeurs manquantes, les doublons</li>
            <li><strong>Transformation :</strong> Filtrer, trier, grouper les donn√©es</li>
            <li><strong>Analyse :</strong> Statistiques descriptives, corr√©lations</li>
          </ul>
        </div>
      `,
      order: 2,
      estimatedTime: '3h',
      codeExamples: [
        {
          title: 'Cr√©ation et manipulation de DataFrames',
          description: 'Comment cr√©er et manipuler des tableaux de donn√©es',
          code: `import pandas as pd
import numpy as np

# Cr√©ation d'un DataFrame depuis un dictionnaire
data = {
    'Nom': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
    'Age': [25, 30, 35, 28, 32],
    'Salaire': [45000, 52000, 48000, 61000, 55000],
    'Departement': ['IT', 'Marketing', 'IT', 'Finance', 'Marketing']
}

df = pd.DataFrame(data)
print("DataFrame cr√©√© :")
print(df)

# Informations sur le DataFrame
print(f"\nDimensions: {df.shape}")
print(f"Colonnes: {list(df.columns)}")
print(f"Types de donn√©es:\n{df.dtypes}")

# Statistiques descriptives
print(f"\nStatistiques descriptives:\n{df.describe()}")`,
          language: 'python',
          explanation: 'Ce code montre comment cr√©er un DataFrame r√©aliste avec des donn√©es d\'employ√©s et explorer sa structure.'
        },
        {
          title: 'Filtrage et s√©lection de donn√©es',
          description: 'Comment extraire des informations sp√©cifiques d\'un DataFrame',
          code: `# Filtrer les employ√©s IT
df_it = df[df['Departement'] == 'IT']
print("Employ√©s IT:")
print(df_it)

# Employ√©s avec salaire > 50000
df_high_salary = df[df['Salaire'] > 50000]
print("\nEmploy√©s avec salaire > 50k:")
print(df_high_salary)

# S√©lection par colonnes
noms_ages = df[['Nom', 'Age']]
print("\nJuste noms et √¢ges:")
print(noms_ages)

# S√©lection par index (iloc pour position, loc pour label)
print(f"\nPremier employ√©: {df.iloc[0]}")
print(f"Employ√© nomm√© Bob: {df.loc[df['Nom'] == 'Bob']}")`,
          language: 'python',
          explanation: 'Le filtrage est une op√©ration fondamentale en Data Science pour extraire les donn√©es pertinentes.'
        }
      ],
      exercises: [
        {
          id: 'ex-pandas-1',
          title: 'Analyse des ventes',
          description: '√Ä partir d\'un DataFrame de ventes, calculez le chiffre d\'affaires total et identifiez le produit le plus vendu.',
          difficulty: 'moyen',
          solution: `import pandas as pd

# Jeu de donn√©es fictif
ventes = pd.DataFrame({
    'Produit': ['A', 'B', 'A', 'C', 'B', 'A'],
    'Quantite': [10, 5, 8, 12, 6, 15],
    'Prix': [100, 200, 100, 150, 200, 100]
})

# Calcul du chiffre d'affaires
ventes['CA'] = ventes['Quantite'] * ventes['Prix']
total_ca = ventes['CA'].sum()

# Produit le plus vendu
produit_plus_vendu = ventes.groupby('Produit')['Quantite'].sum().idxmax()

print(f"CA total: {total_ca}‚Ç¨")
print(f"Produit le plus vendu: {produit_plus_vendu}")`
        }
      ]
    },
    {
      id: 'visualization',
      title: 'Visualisation de donn√©es',
      content: `
        <div class="course-section">
          <h3>L'importance de la visualisation</h3>
          <p>"Une image vaut mille mots" - surtout en Data Science ! La visualisation permet de :</p>
          <ul>
            <li>D√©couvrir des patterns et tendances</li>
            <li>Communiquer efficacement les r√©sultats</li>
            <li>Identifier les anomalies et valeurs aberrantes</li>
            <li>Rendre les donn√©es accessibles aux non-sp√©cialistes</li>
          </ul>

          <h3>Types de graphiques essentiels</h3>
          <h4>Histogramme</h4>
          <p>Distribution d'une variable continue (√¢ges, salaires, temp√©ratures...)</p>

          <h4>Diagramme en barres</h4>
          <p>Comparaison de cat√©gories (ventes par r√©gion, effectifs par d√©partement...)</p>

          <h4>Nuage de points (Scatter plot)</h4>
          <p>Relation entre deux variables continues (√¢ge vs salaire, temp√©rature vs consommation...)</p>

          <h4>Carte thermique (Heatmap)</h4>
          <p>Corr√©lations entre variables, matrices de confusion...</p>
        </div>
      `,
      order: 3,
      estimatedTime: '2h 30min',
      codeExamples: [
        {
          title: 'Visualisations avec Matplotlib et Seaborn',
          description: 'Cr√©er des graphiques professionnels pour analyser les donn√©es',
          code: `import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Configuration pour de beaux graphiques
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# Jeu de donn√©es fictif
np.random.seed(42)
data = {
    'Age': np.random.normal(35, 10, 200),
    'Salaire': np.random.normal(45000, 10000, 200),
    'Experience': np.random.normal(8, 5, 200),
    'Departement': np.random.choice(['IT', 'Marketing', 'Finance', 'RH'], 200)
}
df = pd.DataFrame(data)

# Histogramme des √¢ges
plt.figure(figsize=(10, 6))
plt.hist(df['Age'], bins=20, alpha=0.7, edgecolor='black')
plt.title('Distribution des √¢ges dans l\'entreprise', fontsize=16, fontweight='bold')
plt.xlabel('Age (ann√©es)')
plt.ylabel('Nombre d\'employ√©s')
plt.grid(True, alpha=0.3)
plt.show()

# Diagramme en barres des d√©partements
dept_counts = df['Departement'].value_counts()
plt.figure(figsize=(10, 6))
bars = plt.bar(dept_counts.index, dept_counts.values, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
plt.title('R√©partition par d√©partement', fontsize=16, fontweight='bold')
plt.xlabel('D√©partement')
plt.ylabel('Nombre d\'employ√©s')

# Ajouter les valeurs sur les barres
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
             f'{int(height)}', ha='center', va='bottom')

plt.show()

# Nuage de points : Salaire vs Exp√©rience
plt.figure(figsize=(10, 6))
scatter = plt.scatter(df['Experience'], df['Salaire'], alpha=0.6, c=df['Age'], cmap='viridis')
plt.title('Salaire vs Exp√©rience professionnelle', fontsize=16, fontweight='bold')
plt.xlabel('Ann√©es d\'exp√©rience')
plt.ylabel('Salaire annuel (‚Ç¨)')
plt.colorbar(scatter, label='Age')
plt.grid(True, alpha=0.3)
plt.show()`,
          language: 'python',
          explanation: 'Cette s√©rie de graphiques montre comment explorer visuellement les relations dans les donn√©es.'
        }
      ]
    },
    {
      id: 'statistiques-descriptives',
      title: 'Statistiques descriptives avec Python',
      content: `
        <div class="course-section">
          <h2>Statistiques descriptives</h2>
          <p>Les statistiques descriptives sont essentielles pour comprendre et r√©sumer les donn√©es. Elles nous aident √† :</p>
          <ul>
            <li>D√©crire les tendances centrales (moyenne, m√©diane, mode)</li>
            <li>Mesurer la dispersion (√©cart-type, variance, √©tendue)</li>
            <li>Identifier les valeurs aberrantes</li>
            <li>Comprendre la distribution des donn√©es</li>
          </ul>

          <h3>M√©triques cl√©s</h3>
          <table class="table-auto w-full">
            <thead>
              <tr>
                <th class="px-4 py-2">M√©trique</th>
                <th class="px-4 py-2">Description</th>
                <th class="px-4 py-2">Quand l'utiliser</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="border px-4 py-2">Moyenne</td>
                <td class="border px-4 py-2">Somme des valeurs divis√©e par le nombre d'observations</td>
                <td class="border px-4 py-2">Donn√©es sym√©triques sans valeurs extr√™mes</td>
              </tr>
              <tr>
                <td class="border px-4 py-2">M√©diane</td>
                <td class="border px-4 py-2">Valeur qui s√©pare les donn√©es en deux parties √©gales</td>
                <td class="border px-4 py-2">Donn√©es asym√©triques ou avec valeurs aberrantes</td>
              </tr>
              <tr>
                <td class="border px-4 py-2">√âcart-type</td>
                <td class="border px-4 py-2">Mesure de la dispersion des donn√©es autour de la moyenne</td>
                <td class="border px-4 py-2">Pour √©valuer la variabilit√© des donn√©es</td>
              </tr>
              <tr>
                <td class="border px-4 py-2">Coefficient de variation</td>
                <td class="border px-4 py-2">√âcart-type / Moyenne (en %)</td>
                <td class="border px-4 py-2">Comparer la variabilit√© entre jeux de donn√©es d'√©chelles diff√©rentes</td>
              </tr>
            </tbody>
          </table>

          <h3>Analyse de distribution</h3>
          <p>Comprendre comment les donn√©es sont distribu√©es est crucial :</p>
          <ul>
            <li><strong>Asym√©trie (skewness)</strong> : Mesure de l'asym√©trie de la distribution</li>
            <li><strong>Aplatissement (kurtosis)</strong> : Mesure de la forme des queues de distribution</li>
            <li><strong>Test de normalit√©</strong> : V√©rifier si les donn√©es suivent une distribution normale</li>
          </ul>
        </div>
      `,
      order: 4,
      estimatedTime: '3h',
      codeExamples: [
        {
          title: 'Analyse statistique avec pandas',
          description: 'Calcul des statistiques descriptives de base sur un jeu de donn√©es',
          code: `import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Cr√©ation d'un jeu de donn√©es
data = {
    'age': np.random.normal(35, 8, 1000),
    'salaire': np.random.lognormal(10.5, 0.4, 1000),
    'experience': np.random.gamma(2, 3, 1000),
    'departement': np.random.choice(['IT', 'Marketing', 'Finance', 'RH'], 1000)
}

df = pd.DataFrame(data)

# Statistiques descriptives de base
description = df.describe()
print("Statistiques descriptives :")
print(description)

# Calcul de l'asym√©trie et du kurtosis
print("\nAsym√©trie :")
print(df.skew())
print("\nAplatissement :")
print(df.kurtosis())

# Visualisation des distributions
plt.figure(figsize=(15, 10))

plt.subplot(2, 2, 1)
sns.histplot(df['age'], kde=True)
plt.title('Distribution des √¢ges')

plt.subplot(2, 2, 2)
sns.histplot(np.log(df['salaire']), kde=True)
plt.title('Distribution des salaires (√©chelle logarithmique)')

plt.subplot(2, 2, 3)
sns.boxplot(x='departement', y='salaire', data=df)
plt.title('Salaire par d√©partement')
plt.xticks(rotation=45)

plt.subplot(2, 2, 4)
sns.scatterplot(x='experience', y='salaire', hue='departement', data=df, alpha=0.6)
plt.title('Relation exp√©rience-salaire')

plt.tight_layout()
plt.show()

# Test de corr√©lation
correlation = df.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation, annot=True, cmap='coolwarm', center=0)
plt.title('Matrice de corr√©lation')
plt.show()`,
          language: 'python',
          explanation: 'Ce code montre comment effectuer une analyse statistique compl√®te avec visualisation des distributions et des relations entre variables.'
        }
      ],
      exercises: [
        {
          id: 'ex-stats-1',
          title: 'Analyse des salaires',
          description: '√Ä partir du jeu de donn√©es ci-dessus, r√©pondez aux questions suivantes :\n1. Quel est le salaire m√©dian ?\n2. Quel d√©partement a le salaire moyen le plus √©lev√© ?\n3. Y a-t-il une corr√©lation entre l\'√¢ge et le salaire ?\n4. Identifiez les valeurs aberrantes dans la distribution des salaires.',
          difficulty: 'moyen',
          solution: `# 1. Salaire m√©dian
median_salary = df['salaire'].median()
print(f"1. Salaire m√©dian: {median_salary:.2f}‚Ç¨")

# 2. D√©partement avec le salaire moyen le plus √©lev√©
dept_salaries = df.groupby('departement')['salaire'].mean().sort_values(ascending=False)
print("\n2. Salaire moyen par d√©partement :")
print(dept_salaries.to_string())

# 3. Corr√©lation √¢ge-salaire
correlation = df['age'].corr(df['salaire'])
print(f"\n3. Corr√©lation √¢ge-salaire: {correlation:.3f}")

# 4. D√©tection des valeurs aberrantes dans les salaires
Q1 = df['salaire'].quantile(0.25)
Q3 = df['salaire'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers = df[(df['salaire'] < lower_bound) | (df['salaire'] > upper_bound)]
print(f"\n4. Nombre de valeurs aberrantes d√©tect√©es: {len(outliers)}")

# Visualisation des valeurs aberrantes
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['salaire'])
plt.title('Bo√Æte √† moustaches des salaires')
plt.show()`
        },
        {
          id: 'ex-stats-2',
          title: 'Test d\'hypoth√®se',
          description: 'Testez l\'hypoth√®se suivante : "Le salaire moyen dans le d√©partement IT est significativement diff√©rent du salaire moyen dans le d√©partement Marketing" en utilisant un test t de Student.',
          difficulty: 'difficile',
          solution: `from scipy import stats

# Extraction des salaires par d√©partement
salaires_it = df[df['departement'] == 'IT']['salaire']
salaires_marketing = df[df['departement'] == 'Marketing']['salaire']

# Test de normalit√© (Shapiro-Wilk)
_, p_value_it = stats.shapiro(salaires_it)
_, p_value_marketing = stats.shapiro(salaires_marketing)

print(f"Test de normalit√© (p-value) - IT: {p_value_it:.4f}")
print(f"Test de normalit√© (p-value) - Marketing: {p_value_marketing:.4f}")

# Test de Levene pour l'√©galit√© des variances
_, p_levene = stats.levene(salaires_it, salaires_marketing)
print(f"\nTest d'√©galit√© des variances (p-value): {p_levene:.4f}")

# Test t de Student (variances √©gales ou non selon le test de Levene)
equal_var = p_levene > 0.05  # Si p > 0.05, on consid√®re les variances √©gales
t_stat, p_value = stats.ttest_ind(salaires_it, salaires_marketing, equal_var=equal_var)

print(f"\nTest t de Student (p-value): {p_value:.4f}")

# Interpr√©tation
alpha = 0.05
if p_value < alpha:
    print("\nConclusion : On rejette l'hypoth√®se nulle.")
    print("Il y a une diff√©rence significative entre les salaires moyens des d√©partements IT et Marketing.")
else:
    print("\nConclusion : On ne peut pas rejeter l'hypoth√®se nulle.")
    print("Il n'y a pas de diff√©rence significative entre les salaires moyens des d√©partements IT et Marketing.")

# Calcul des intervalles de confiance √† 95%
mean_it = np.mean(salaires_it)
mean_marketing = np.mean(salaires_marketing)

ci_it = stats.t.interval(0.95, len(salaires_it)-1, loc=mean_it, scale=stats.sem(salaires_it))
ci_marketing = stats.t.interval(0.95, len(salaires_marketing)-1, loc=mean_marketing, scale=stats.sem(salaires_marketing))

print(f"\nIntervalle de confiance 95% - IT: {ci_it[0]:.2f}‚Ç¨ - {ci_it[1]:.2f}‚Ç¨")
print(f"Intervalle de confiance 95% - Marketing: {ci_marketing[0]:.2f}‚Ç¨ - {ci_marketing[1]:.2f}‚Ç¨")`
        }
      ]
    }
  ],
  finalProject: {
    title: 'Analyse compl√®te d\'un jeu de donn√©es',
    description: 'R√©alisez une analyse compl√®te sur un jeu de donn√©es r√©el de votre choix ou fourni par le formateur.',
    requirements: [
      'Nettoyage et pr√©paration des donn√©es',
      'Analyse exploratoire avec statistiques descriptives',
      'Cr√©ation d\'au moins 5 visualisations pertinentes',
      'Identification des insights principaux',
      'Pr√©sentation claire des r√©sultats'
    ],
    deliverables: [
      'Notebook Jupyter complet et comment√©',
      'Rapport d\'analyse (5-10 pages)',
      'Pr√©sentation orale de 10 minutes',
      'Jeu de donn√©es nettoy√© et document√©'
    ]
  },
  resources: [
    {
      title: 'Documentation officielle Pandas',
      type: 'documentation',
      url: 'https://pandas.pydata.org/docs/'
    },
    {
      title: 'Tutoriel NumPy',
      type: 'article',
      url: 'https://numpy.org/doc/stable/user/quickstart.html'
    },
    {
      title: 'Guide Matplotlib',
      type: 'article',
      url: 'https://matplotlib.org/stable/contents.html'
    },
    {
      title: 'Documentation SciPy',
      type: 'documentation',
      url: 'https://docs.scipy.org/doc/'
    },
    {
      title: 'Vid√©os de statistiques avec Python',
      type: 'video',
      url: 'https://www.coursera.org/learn/statistics-with-python'
    },
    {
      title: 'Kaggle - Plateforme de datasets',
      type: 'dataset',
      url: 'https://www.kaggle.com/datasets'
    },
    {
      title: 'Guide de visualisation avec Python',
      type: 'article',
      url: 'https://www.data-to-viz.com/'
    },
    {
      title: 'Vid√©os avanc√©es de Data Science',
      type: 'video',
      url: 'https://www.edx.org/learn/data-science'
    },
    {
      title: 'Documentation SciKit-Learn',
      type: 'documentation',
      url: 'https://scikit-learn.org/stable/'
    },
    {
      title: 'Jeux de donn√©es avanc√©s',
      type: 'dataset',
      url: 'https://github.com/topics/data-science'
    }
  ],
  tags: ['python', 'pandas', 'matplotlib', 'seaborn', 'data-analysis', 'visualization']
};
